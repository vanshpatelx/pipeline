name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Go dependencies
        run: |
          cd backend/goproject
          go mod tidy

      # Install Node.js dependencies
      - name: Install Node.js dependencies
        run: |
          cd backend/MS1
          npm install

      # # Lint code (Go & TypeScript)
      # - name: Lint Go code
      #   run: |
      #     cd go-service
      #     golangci-lint run

      # - name: Lint TypeScript code
      #   run: |
      #     cd ts-service
      #     npx eslint .

      # Run Go unit tests
      # - name: Run Go tests
      #   run: |
      #     cd go-service
      #     go test -v ./...

      # # Run TypeScript unit tests
      # - name: Run TypeScript tests
      #   run: |
      #     cd ts-service
      #     npm test -- --coverage

  # Build Docker Images for services
  build_docker_images:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build Go Docker image
      - name: Build Go Docker image
        run: |
          cd go-service
          docker build -t myorg/go-service .

      # Build TypeScript Docker image
      - name: Build TypeScript Docker image
        run: |
          cd ts-service
          docker build -t myorg/ts-service .

  # Push Docker Images to Docker Hub or GitHub Packages
  push_to_registry:
    runs-on: ubuntu-latest
    needs: build_docker_images
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to Docker Hub or GitHub Packages
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push Go Docker image
      - name: Push Go Docker image
        run: |
          docker push myorg/go-service

      # Push TypeScript Docker image
      - name: Push TypeScript Docker image
        run: |
          docker push myorg/ts-service

  # Deploy to Staging
  deploy_to_staging:
    runs-on: ubuntu-latest
    needs: push_to_registry
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Deploy to AWS EC2 (if youâ€™re using EC2 for staging)
      - name: Deploy to EC2
        run: |
          ssh -i ${{ secrets.AWS_SSH_KEY }} ec2-user@ec2-your-ec2-ip 'bash -s' < deploy-script.sh

  # Smoke Test to verify the deployment
  smoke_tests:
    runs-on: ubuntu-latest
    needs: deploy_to_staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run smoke tests
        run: |
          curl -f http://your-ec2-ip:8080/userDb
          curl -f http://your-ec2-ip:8080/userCache
